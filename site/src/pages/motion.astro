---
import Layout from '../layouts/Layout.astro';
import AnimatedName from '../components/AnimatedName';

const demoReel = {
  title: 'demo reel 2024',
  description: '2025 reel coming soon and coming in hot',
  videoUrl: 'https://www.youtube.com/embed/RfN9oUM4Cos?si=NOUqPkB2sKbAAOkJ&loop=1&playlist=RfN9oUM4Cos&playsinline=1',
  tags: ['after-effects', 'super-awesome', 'cool']
};

const videos = [
  {
    title: 'ted',
    description: 'a robot that, just like us, has a limited amount of time',
    video: 'https://res.cloudinary.com/dghjime6m/video/upload/v1743718406/ted_t3wjfr.mp4',
    tags: ['after-effects', 'personal'],
    size: 'square'
  },
  {
    title: 'drop it',
    description: 'fluid motion and dithering',
    video: 'https://res.cloudinary.com/dghjime6m/video/upload/v1747596134/Comp_1_20-1_dwsat5.mp4',
    tags: ['after-effects', 'personal'],
    size: 'square'
  },
  {
    title: 'five dynamics',
    description: 'they make cool rockets',
    video: 'https://res.cloudinary.com/dghjime6m/video/upload/v1743719692/main_ITERATION_9_r0dadq.mp4',
    tags: ['after-effects', 'element3d','client', ],
    size: 'wide' 
  },

  {
    title: 'loco',
    description: 'u make me go loco',
    video: 'https://res.cloudinary.com/dghjime6m/video/upload/v1743623370/loco_whtqlw.mp4',
    tags: ['after-effects', 'personal'],
    size: 'square'
  },
  {
    title: '12fps',
    description: 'guess how many frames per second this is',
    video: 'https://res.cloudinary.com/dghjime6m/video/upload/v1743718398/12fps_frcy0r.mp4',
    tags: ['after-effects', 'personal'],
    size: 'square'
  },
  {
    title: 'respell.ai',
    description: 'trial video for a startup',
    video: 'https://res.cloudinary.com/dghjime6m/video/upload/v1743718386/respellaiTrialVideo_arz48v.mp4',
    tags: ['after-effects', 'client'],
    size: 'wide'
  },

  {
    title: 'etea teaser',
    description: 'animated the trailer for our indie game',
    video: 'https://res.cloudinary.com/dghjime6m/video/upload/v1743719918/ETea_-_Reveal_Teaser_1080_ihqygh.mp4',
    tags: ['after-effects', 'personal'],
    size: 'wide'
  },
];

const isVideo = (url: string) => {
  return url.match(/\.(mp4|webm|mov)$/i) !== null;
};

const getGridClasses = (size: string) => {
  switch (size) {
    case 'wide':
      return 'md:col-span-2';
    case 'tall':
      return 'md:row-span-2';
    case 'square':
      return 'md:row-span-2 md:col-span-1';
    default:
      return '';
  }
};

const getAspectRatio = (size: string) => {
  switch (size) {
    case 'wide':
      return 'aspect-[2/1]';
    case 'tall':
      return 'aspect-[9/16]';
    case 'square':
      return 'aspect-square';
    default:
      return 'aspect-video';
  }
};
---

<Layout title="motion - jadden picardal">
  <section class="mb-32">
    <div class="mb-16">
      <AnimatedName text="Motion" size="7xl" client:load />
    </div>
    <div class="prose prose-lg text-secondary max-w-none mb-16">
      <p class="font-['Redaction-10']">
        i like making things move.
      </p>
    </div>

    <!-- demo reel -->
    <div class="mb-24">
      <article class="group">
        <div class="aspect-video mb-4 bg-muted rounded-lg overflow-hidden">
          <iframe
            src={demoReel.videoUrl}
            title="YouTube video player"
            frameborder="0"
            class="w-full h-full"
            allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share"
            referrerpolicy="strict-origin-when-cross-origin"
            allowfullscreen
          ></iframe>
        </div>
        <header class="mb-3">
          <h2 class="font-['Redaction-10'] text-2xl group-hover:text-accent transition-colors">
            {demoReel.title}
          </h2>
          <div class="text-sm text-secondary mt-1 font-['Redaction-10']">
            {demoReel.description}
          </div>
        </header>
        <div class="flex flex-wrap gap-1.5">
          {demoReel.tags.map(tag => (
            <span class="px-2 py-0.5 text-xs rounded-full bg-muted text-secondary font-['Redaction-10']">
              {tag}
            </span>
          ))}
        </div>
      </article>
    </div>

    <!-- misc videos -->
    <div class="grid grid-cols-1 md:grid-cols-2 gap-8 auto-rows-min">
      {videos.map(video => (
        <article class={`group ${getGridClasses(video.size)}`}>
          <div class={`${getAspectRatio(video.size)} mb-4 bg-muted rounded-lg overflow-hidden relative video-container`}>
            <video
              src={video.video}
              autoplay
              loop
              muted
              playsinline
              class="w-full h-full object-cover"
            />
          </div>
          <header class="mb-3">
            <h2 class="font-['Redaction-10'] text-xl group-hover:text-accent transition-colors">
              {video.title}
            </h2>
            <div class="text-sm text-secondary mt-1 font-['Redaction-10']">
              {video.description}
            </div>
          </header>
          <div class="flex flex-wrap gap-1.5">
            {video.tags.map(tag => (
              <span class="px-2 py-0.5 text-xs rounded-full bg-muted text-secondary font-['Redaction-10']">
                {tag}
              </span>
            ))}
          </div>
        </article>
      ))}
    </div>
  </section>
</Layout>

<script>
  function setupVideoHover() {
    document.querySelectorAll('.video-container').forEach(container => {
      const video = container.querySelector('video');
      if (!video) return;

      // Prevent any pausing
      video.addEventListener('pause', () => {
        video.play();
      });

      // Load audio track immediately
      video.load();

      container.addEventListener('mouseenter', () => {
        video.muted = false;
        // Ensure playing
        if (video.paused) {
          video.play();
        }
      });

      container.addEventListener('mouseleave', () => {
        video.muted = true;
      });

      // Initial setup
      video.play().catch(e => {
        console.log('Auto-play failed, retrying:', e);
        // If initial play fails, try again after a short delay
        setTimeout(() => video.play(), 100);
      });
    });
  }

  // Call setup when DOM is loaded and when dynamic content changes
  document.addEventListener('DOMContentLoaded', setupVideoHover);
  // Re-run setup if any dynamic content is loaded
  document.addEventListener('astro:after-swap', setupVideoHover);
</script>

<style>
  article {
    position: relative;
  }
  
  article::before {
    content: '';
    position: absolute;
    top: 0;
    left: -1rem;
    width: 2px;
    height: 2rem;
    background: var(--muted);
    opacity: 0;
    transform: scaleY(0);
    transition: all 0.2s ease;
  }
  
  article:hover::before {
    opacity: 1;
    transform: scaleY(1);
    background: var(--accent);
  }
</style> 