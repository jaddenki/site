---
import Layout from '../layouts/Layout.astro';
import AnimatedName from '../components/AnimatedName';
import { posts } from '../data/posts';
import { projects } from '../data/projects';

const sortedPosts = [...posts]
  .filter(post => post.published)
  .sort((a, b) => new Date(b.date).getTime() - new Date(a.date).getTime());

const projectNotes = [...projects]
  .filter(project => project.published && project.link.startsWith('/projects/'))
  .sort((a, b) => new Date(b.date).getTime() - new Date(a.date).getTime());

const formatDate = (date: string): string => {
  if (!date) return '';
  if (date.length <= 7) return date;
  return new Date(date).toISOString().split('T')[0];
};
---

<Layout title="jadden's notes">
  <section class="mb-20 sm:mb-32">
    <div class="mb-10 sm:mb-16">
      <AnimatedName text="Notebook" size="7xl" client:load />
    </div>
    <div class="prose prose-lg text-secondary max-w-none mb-10 sm:mb-16">
      <p class="font-['Redaction-10']">
        some of my thoughts and learnings. welcome to my brain
      </p>
      <p class="font-['Redaction-10']">
        also, here's a bit of <a href="/blog/recommendations" class="text-accent">what inspires me</a> ;).
      </p>

    </div>

    <div class="flex flex-wrap gap-3 mb-8">
      <button 
        id="show-all" 
        class="px-4 py-2 rounded-full border-1 border-accent text-accent font-['Redaction-10'] text-sm transition-colors"
      >
        all
      </button>
      <button 
        id="show-blog" 
        class="px-4 py-2 rounded-full border-1 border-muted text-secondary font-['Redaction-10'] text-sm hover:border-accent hover:text-accent transition-colors"
      >
        blog only
      </button>
      <button 
        id="show-projects" 
        class="px-4 py-2 rounded-full border-1 border-muted text-secondary font-['Redaction-10'] text-sm hover:border-accent hover:text-accent transition-colors"
      >
        projects only
      </button>
    </div>

    <div id="blog-posts-section">
      <h2 class="font-['Redaction-10'] text-2xl sm:text-3xl mb-6 sm:mb-8">
        <AnimatedName text="Blog Posts" size="3xl" client:load />
      </h2>
      <div class="grid grid-cols-1 gap-6 sm:gap-8 mb-12 sm:mb-16">
        {sortedPosts.map(post => (
          <a href={post.link} class="block group">
            <div class="border border-muted rounded-lg p-4 sm:p-6 transition-all hover:border-accent">
              <div class="flex flex-col sm:flex-row sm:justify-between sm:items-start mb-2 sm:mb-3">
                <h3 class="font-['Redaction-10'] text-xl sm:text-2xl text-foreground group-hover:text-accent transition-colors mb-1 sm:mb-0">
                  {post.title}
                </h3>
                <span class="text-accent font-['Redaction-10'] text-sm whitespace-nowrap sm:ml-4">
                  {formatDate(post.date)}
                </span>
              </div>
              <p class="text-secondary font-['Redaction-10'] leading-relaxed">
                {post.description}
              </p>
            </div>
          </a>
        ))}
      </div>
    </div>
    
    <div id="project-notes-section">
      <h2 class="font-['Redaction-10'] text-2xl sm:text-3xl mb-6 sm:mb-8">
        <AnimatedName text="Project Notes" size="3xl" client:load />
      </h2>
      <div class="grid grid-cols-1 gap-6 sm:gap-8">
        {projectNotes.map(project => (
          <a href={project.link} class="block group">
            <div class="border border-muted rounded-lg p-4 sm:p-6 transition-all hover:border-accent">
              <div class="flex flex-col sm:flex-row sm:justify-between sm:items-start mb-2 sm:mb-3">
                <h3 class="font-['Redaction-10'] text-xl sm:text-2xl text-foreground group-hover:text-accent transition-colors mb-1 sm:mb-0">
                  {project.title}
                </h3>
                <span class="text-accent font-['Redaction-10'] text-sm whitespace-nowrap sm:ml-4">
                  {formatDate(project.date)}
                </span>
              </div>
              <p class="text-secondary font-['Redaction-10'] leading-relaxed">
                {project.description}
              </p>
              {project.tags && (
                <div class="flex flex-wrap gap-2 mt-3 sm:mt-4">
                  {project.tags.map((tag) => (
                    <span class="px-2 py-1 text-xs sm:text-sm rounded-full bg-muted text-secondary font-['Redaction-10']">
                      {tag}
                    </span>
                  ))}
                </div>
              )}
            </div>
          </a>
        ))}
      </div>
    </div>
  </section>
</Layout>

<script>
  // Wait for DOM to be fully loaded
  document.addEventListener('DOMContentLoaded', () => {
    const allButton = document.getElementById('show-all');
    const blogButton = document.getElementById('show-blog');
    const projectsButton = document.getElementById('show-projects');
    
    const blogSection = document.getElementById('blog-posts-section');
    const projectsSection = document.getElementById('project-notes-section');
    
    if (!allButton || !blogButton || !projectsButton || !blogSection || !projectsSection) {
      console.error('Could not find filter buttons or sections');
      return;
    }
    
    // Set active button style
    const setActiveButton = (activeButton: HTMLElement) => {
      [allButton, blogButton, projectsButton].forEach(button => {
        if (button === activeButton) {
          button.classList.remove('border-muted', 'text-secondary');
          button.classList.add('border-accent', 'text-accent');
        } else {
          button.classList.remove('border-accent', 'text-accent');
          button.classList.add('border-muted', 'text-secondary');
        }
      });
    };
    
    // Show all content (default)
    allButton.addEventListener('click', () => {
      blogSection.style.display = 'block';
      projectsSection.style.display = 'block';
      setActiveButton(allButton);
    });
    
    // Show only blog posts
    blogButton.addEventListener('click', () => {
      blogSection.style.display = 'block';
      projectsSection.style.display = 'none';
      setActiveButton(blogButton);
    });
    
    // Show only project notes
    projectsButton.addEventListener('click', () => {
      blogSection.style.display = 'none';
      projectsSection.style.display = 'block';
      setActiveButton(projectsButton);
    });
  });
</script> 